//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using StrixIT.Platform.Core;

namespace StrixIT.Platform.Modules.Cms.Tests.Data
{
    [TestClass]
    public class PlatformDataSourceTests
    {
        #region Public Methods

        [TestCleanup]
        public void Cleanup()
        {
            Logger.LoggingService = null;
        }

        [TestMethod]
        public void CmsConfigShouldCorrectlyReportUseOfSqlCompact()
        {
            var source = new TestPlatformDataSource(null, null);
            Assert.IsTrue(StrixCms.Config.UsesSqlCompactDatabase);
        }

        [TestMethod]
        public void GetManyToManyRelationValuesShouldReturnAllManyToManyKeyValues()
        {
            //var source = new TestDataSource();
            //var entity = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data" };
            //entity.Info = new PersonalInfo { Name = "Test", Description = "Description", Address = new Address { Street = "Wall street", City = "New York" } };
            //entity.Siblings = new List<CompositeKeyEntity>();
            //var siblingA = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data sibling A" };
            //siblingA.Info = new PersonalInfo { Address = new Address() };
            //entity.Siblings.Add(siblingA);
            //entity.OtherSiblings = new List<CompositeKeyEntity>();
            //var siblingB = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data sibling B" };
            //siblingB.Info = new PersonalInfo { Address = new Address() };
            //entity.OtherSiblings.Add(siblingB);
            //source.Save(entity);
            //source.SaveChanges();

            //// When the relations change, modified properties should be found.
            //var siblingAValues = source.GetExistingManyToManyRelations(entity, "Siblings").Cast<CompositeKeyEntity>().ToList().First();
            //var siblingBValues = source.GetExistingManyToManyRelations(entity, "OtherSiblings").Cast<CompositeKeyEntity>().ToList().First();
            //Assert.AreEqual(siblingA.Id, siblingAValues.Id);
            //Assert.AreEqual(siblingA.Culture, siblingAValues.Culture);
            //Assert.AreEqual(siblingA.VersionNumber, siblingAValues.VersionNumber);
            //Assert.AreEqual(siblingB.Id, siblingBValues.Id);
            //Assert.AreEqual(siblingB.Culture, siblingBValues.Culture);
            //Assert.AreEqual(siblingB.VersionNumber, siblingBValues.VersionNumber);

            //// Cleanup
            //source = new TestDataSource();
            //entity = source.Query<CompositeKeyEntity>().Include(c => c.Siblings).Include(c => c.OtherSiblings).First(e => e.Id == entity.Id && e.Culture == entity.Culture && e.VersionNumber == entity.VersionNumber);
            //entity.Siblings.Clear();
            //entity.OtherSiblings.Clear();

            //foreach (var item in source.Query<CompositeKeyEntity>().Where(e => !(e.Id == entity.Id && e.Culture == entity.Culture && e.VersionNumber == entity.VersionNumber)))
            //{
            //    source.Delete(item);
            //}

            //source.Delete(entity);
            //source.SaveChanges();
            Assert.Inconclusive("Implement");
        }

        [TestMethod]
        public void GetModifiedPropertyValuesShouldReturnAllModifiedAndNestedComplexProperties()
        {
            //var source = new TestDataSource();
            //var entity = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data" };
            //entity.Info = new PersonalInfo { Name = "Test", Description = "Description", Address = new Address { Street = "Wall street", City = "New York" } };
            //source.Save(entity);
            //source.SaveChanges();
            //entity.Data = "New data";
            //entity.Info.Description = "Edited";
            //entity.Info.Address.Street = "Main street";
            //var result = source.GetModifiedPropertyValues(entity);
            //source.Delete(entity);
            //source.SaveChanges();
            //Assert.AreEqual(3, result.Count);
            //Assert.AreEqual("Data", result[0].PropertyName);
            //Assert.AreEqual("data", result[0].OldValue);
            //Assert.AreEqual("New data", result[0].NewValue);
            //Assert.AreEqual("Info.Description", result[1].PropertyName);
            //Assert.AreEqual("Description", result[1].OldValue);
            //Assert.AreEqual("Edited", result[1].NewValue);
            //Assert.AreEqual("Info.Address.Street", result[2].PropertyName);
            //Assert.AreEqual("Wall street", result[2].OldValue);
            //Assert.AreEqual("Main street", result[2].NewValue);
            Assert.Inconclusive("Implement");
        }

        [TestMethod]
        public void GetModifiedPropertyValuesShouldReturnAllModifiedRelationalManyOnManyProperties()
        {
            //var source = new TestDataSource();
            //var entity = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data" };
            //entity.Info = new PersonalInfo { Name = "Test", Description = "Description", Address = new Address { Street = "Wall street", City = "New York" } };
            //entity.Siblings = new List<CompositeKeyEntity>();
            //var siblingA = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data sibling A" };
            //siblingA.Info = new PersonalInfo { Address = new Address() };
            //entity.Siblings.Add(siblingA);
            //var siblingB = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data sibling B" };
            //siblingB.Info = new PersonalInfo { Address = new Address() };
            //entity.Siblings.Add(siblingB);
            //source.Save(entity);
            //source.SaveChanges();
            //source = new TestDataSource();
            //var siblingC = new CompositeKeyEntity { Id = Guid.NewGuid(), Culture = "en", VersionNumber = 1, Data = "data sibling A" };
            //siblingC.Info = new PersonalInfo { Address = new Address() };
            //entity = source.Query<CompositeKeyEntity>().First(e => e.Id == entity.Id && e.Culture == entity.Culture && e.VersionNumber == entity.VersionNumber);

            //// When the relations change, modified properties should be found.
            //entity.Siblings = new List<CompositeKeyEntity>();
            //entity.Siblings.Add(siblingC);
            //var result = source.GetModifiedPropertyValues(entity);
            //Assert.AreEqual(1, result.Count);
            //var oldValue = (List<IDictionary<string, object>>)result[0].OldValue;
            //var newValue = (List<IDictionary<string, object>>)result[0].NewValue;
            //Assert.AreEqual(2, oldValue.Count);
            //Assert.IsTrue(oldValue.Any(r => (Guid)r["Id"] == siblingA.Id));
            //Assert.IsTrue(oldValue.Any(r => (Guid)r["Id"] == siblingB.Id));
            //Assert.AreEqual(1, newValue.Count);
            //Assert.IsTrue(newValue.Any(r => (Guid)r["Id"] == siblingC.Id));

            //// When the relations are the same, no changes should be reported
            //entity.Siblings.Clear();
            //entity.Siblings.Add(siblingA);
            //entity.Siblings.Add(siblingB);
            //result = source.GetModifiedPropertyValues(entity);
            //Assert.AreEqual(0, result.Count);

            //// When the relation has been set to null, the old values should be present.
            //entity.Siblings = null;
            //result = source.GetModifiedPropertyValues(entity);
            //Assert.AreEqual(1, result.Count);
            //oldValue = (List<IDictionary<string, object>>)result[0].OldValue;
            //newValue = (List<IDictionary<string, object>>)result[0].NewValue;
            //Assert.AreEqual(2, oldValue.Count);
            //Assert.IsTrue(oldValue.Any(r => (Guid)r["Id"] == siblingA.Id));
            //Assert.IsTrue(oldValue.Any(r => (Guid)r["Id"] == siblingB.Id));
            //Assert.AreEqual(0, newValue.Count);

            //// Cleanup
            //source = new TestDataSource();
            //entity = source.Query<CompositeKeyEntity>().Include(c => c.Siblings).First(e => e.Id == entity.Id && e.Culture == entity.Culture && e.VersionNumber == entity.VersionNumber);
            //entity.Siblings.Clear();

            //foreach (var item in source.Query<CompositeKeyEntity>().Where(e => !(e.Id == entity.Id && e.Culture == entity.Culture && e.VersionNumber == entity.VersionNumber)))
            //{
            //    source.Delete(item);
            //}

            //source.Delete(entity);
            //source.SaveChanges();
            Assert.Inconclusive("Implement");
        }

        [TestMethod]
        public void GetModifiedPropertyValuesShouldReturnAllModifiedScalarProperties()
        {
            //var source = new TestDataSource();
            //var date = DateTime.Now.AddDays(-5);

            //var testEntity = new TestEntity
            //{
            //    Name = "Test generated 1",
            //    Number = 1,
            //    Date = date,
            //    Description = "Description"
            //};

            //source.Save(testEntity);
            //source.SaveChanges();

            //testEntity.Number = 2;
            //var newDate = DateTime.Now;
            //testEntity.Date = newDate;

            //var result = source.GetModifiedPropertyValues(testEntity);
            //source.Delete(testEntity);
            //source.SaveChanges();

            //Assert.AreEqual(2, result.Count);
            //Assert.AreEqual("Number", result[0].PropertyName);
            //Assert.AreEqual((long)1, result[0].OldValue);
            //Assert.AreEqual((long)2, result[0].NewValue);
            //Assert.AreEqual("Date", result[1].PropertyName);
            //Assert.AreEqual(date, result[1].OldValue);
            //Assert.AreEqual(newDate, result[1].NewValue);
            Assert.Inconclusive("Implement");
        }

        [TestInitialize]
        public void Init()
        {
            TestHelpers.MockUtilities();
            Logger.LoggingService = new Mock<ILoggingService>().Object;
        }

        #endregion Public Methods
    }
}