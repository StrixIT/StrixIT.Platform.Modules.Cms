////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was not generated by a tool. but for stylecop suppression.
//// </auto-generated>
////------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Modules.Cms;
using StrixIT.Platform.Core;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StrixIT.Platform.Modules.Cms.Tests
{
    public class DataSourceMock
    {
        private Mock<IPlatformDataSource> _dataSourceMock = new Mock<IPlatformDataSource>();
        private Dictionary<Type, List<object>> _dataLists = new Dictionary<Type, List<object>>();

        public void RegisterData<T>(IEnumerable<T> data, Func<T, object> keySelector = null) where T : class
        {
            var type = typeof(T);

            if (!_dataLists.ContainsKey(type))
            {
                _dataLists.Add(type, new List<T>().Cast<object>().ToList());
            }

            _dataLists[type] = data.Cast<object>().ToList();
            _dataSourceMock.Setup(s => s.Query<T>()).Returns(_dataLists[type].Cast<T>().AsQueryable());
            _dataSourceMock.Setup(s => s.Query<T>()).Returns(_dataLists[type].Cast<T>().AsQueryable());
            _dataSourceMock.Setup(s => s.Query(typeof(T))).Returns(_dataLists[type].Cast<T>().AsQueryable());
            _dataSourceMock.Setup(s => s.Query(typeof(T), It.IsAny<string>())).Returns(_dataLists[type].Cast<T>().AsQueryable());
            _dataSourceMock.Setup(s => s.GetModifiedPropertyValues(It.IsAny<object>())).Returns(new List<ModifiedPropertyValue>());
        }

        public Mock<IPlatformDataSource> Mock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        public List<T> DataList<T>()
        {
            return _dataLists[typeof(T)].Cast<T>().ToList();
        }

        public void AddDataItem<T>(T item)
        {
            var type = typeof(T);

            if (!_dataLists.ContainsKey(type))
            {
                throw new KeyNotFoundException();
            }

            _dataLists[type].Add(item);
        }
    }
}
