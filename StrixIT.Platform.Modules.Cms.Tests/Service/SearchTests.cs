////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was not generated by a tool. but for stylecop suppression.
//// </auto-generated>
////------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.DependencyInjection;
using StrixIT.Platform.Core.Environment;
using System;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Modules.Cms.Tests.Service
{
    [TestClass]
    public class SearchTests
    {
        #region Private Fields

        private Mock<ICultureService> _cultureServiceMock = new Mock<ICultureService>();
        private Mock<IEntityHelper> _entityHelperMock = new Mock<IEntityHelper>();
        private Mock<IPageRegistrator> _registratorMock = new Mock<IPageRegistrator>();
        private Mock<IPlatformDataSource> _sourceMock = new Mock<IPlatformDataSource>();

        #endregion Private Fields

        #region Public Methods

        [TestInitialize]
        public void Init()
        {
            var dependencyInjectorMock = new Mock<IDependencyInjector>();
            dependencyInjectorMock.Setup(d => d.GetAll<IHandlePlatformEvent<PrepareQueryEvent>>()).Returns(new List<IHandlePlatformEvent<PrepareQueryEvent>> { new HandlePrepareQuery() });
            DependencyInjector.Injector = dependencyInjectorMock.Object;
            Setup();
        }

        [TestMethod]
        public void SearchShouldReturnASearchResultForAllEntitiesMatchingTheFilter()
        {
            var service = GetSearchService();
            var options = new FilterOptions();
            options.Filter = new Filter();
            options.Filter.Logic = FilterType.Or;
            options.Filter.Filters = new List<FilterField>()
            {
                new FilterField(FilterFieldOperator.Contains, "Name", "My"),
                new FilterField(FilterFieldOperator.Contains, "Body", "My"),
                new FilterField(FilterFieldOperator.Contains, "Description", "My")
            };
            var result = service.Search(options);
            Assert.IsNotNull(result);
            Assert.AreEqual(3, result.Data.Select(d => d.TypeName).Distinct().Count());
            Assert.AreEqual(3, result.Data.Count);
        }

        // Todo: create tests for html processing.
        [TestMethod]
        public void SearchShouldReturnASearchResultForAllSearchableEntityTypes()
        {
            var service = GetSearchService();
            var result = service.Search(null);
            Assert.IsNotNull(result);
            Assert.AreEqual(3, result.Data.Select(d => d.TypeName).Distinct().Count());
            Assert.AreEqual(6, result.Data.Count);
        }

        #endregion Public Methods

        #region Private Methods

        private SearchService GetSearchService()
        {
            return new SearchService(_sourceMock.Object, _cultureServiceMock.Object, _entityHelperMock.Object, _registratorMock.Object);
        }

        private void Setup()
        {
            var html = new EntityType() { Id = Guid.NewGuid(), Name = typeof(Html).FullName };
            var news = new EntityType() { Id = Guid.NewGuid(), Name = typeof(News).FullName };
            var documents = new EntityType() { Id = Guid.NewGuid(), Name = typeof(Document).FullName };
            var mailContentTemplates = new EntityType() { Id = Guid.NewGuid(), Name = typeof(MailContentTemplate).FullName };
            var mailContent = new EntityType() { Id = Guid.NewGuid(), Name = typeof(MailContent).FullName };

            var types = new List<EntityType>()
            {
                html, news, documents, mailContentTemplates, mailContent
            };

            var htmlList = new List<Html>()
            {
                new Html { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "Home page text", Body = "Welcome to my website", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "home-page-text" }},
                new Html { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "About me", Body = "I'm a webdeveloper", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "about-me" }},
                new Html { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "Portfolio", Body = "I've worked on a number of sites using ASP.NET", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "portfolio" }}
            };

            var newsList = new List<News>()
            {
                new News { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "New site live", Body = "My new website is now live!", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "new-site-live" }},
                new News { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "Platform open source", Body = "The StrixIT platform is now open source", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "platform-open-source" }},
                new News { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "ASP.NET Next", Body = "I've started working on the ASP.NET Next version of the StrixIT platform", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "aspnet-next" }}
            };

            var documentList = new List<Document>()
            {
                new Document { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "Profile photo", Description = "My profile photo", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "profile-photo" }},
                new Document { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "Platform", Description = "The StrixIT platform as a zip file", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "platform" }},
            };

            var mailContentList = new List<MailContent>()
            {
                new MailContent { Id = Guid.NewGuid(), Culture = "en", IsCurrentVersion = true, Name = "Account created mail", Body = "Account created", Entity = new PlatformEntity { Id = Guid.NewGuid(), Url = "acount-created-mail" }},
            };

            var locators = new List<ContentLocator>();

            foreach (var entry in htmlList)
            {
                locators.Add(new ContentLocator { ContentTypeName = typeof(Html).FullName, ContentUrl = entry.Entity.Url, PageUrl = string.Empty });
            }

            foreach (var entry in newsList)
            {
                locators.Add(new ContentLocator { ContentTypeName = typeof(News).FullName, ContentUrl = entry.Entity.Url, PageUrl = string.Empty });
            }

            _entityHelperMock.Setup(m => m.EntityTypes).Returns(types);
            _entityHelperMock.Setup(m => m.GetEntityType(html.Id)).Returns(typeof(Html));
            _entityHelperMock.Setup(m => m.GetEntityType(news.Id)).Returns(typeof(News));
            _entityHelperMock.Setup(m => m.GetEntityType(documents.Id)).Returns(typeof(Document));

            _sourceMock.Setup(s => s.Query(typeof(Html))).Returns(htmlList.AsQueryable());
            _sourceMock.Setup(s => s.Query(typeof(News))).Returns(newsList.AsQueryable());
            _sourceMock.Setup(s => s.Query(typeof(Document))).Returns(documentList.AsQueryable());
            _sourceMock.Setup(s => s.Query(typeof(MailContent))).Returns(mailContentList.AsQueryable());

            _cultureServiceMock.Setup(c => c.CurrentCultureCode).Returns("en");

            _registratorMock.Setup(p => p.ContentLocators).Returns(locators);
        }

        #endregion Private Methods
    }
}